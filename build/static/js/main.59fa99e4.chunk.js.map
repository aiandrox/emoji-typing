{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","typingString","setTypingString","emoji","setEmoji","className","size","FormControl","Input","id","value","onChange","e","emojiArray","NimbleEmojiIndex","data","search","firstEmoji","length","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAyCeA,MAnCf,WAAgB,IAAD,EAC2BC,mBAAS,IADpC,mBACNC,EADM,KACQC,EADR,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAkBb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,IAAD,CAAOF,MAAOA,EAAOG,KAAM,KAE3B,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,WACHC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAxBpB,SAAgBF,GAEd,GADAR,EAAgBQ,GACF,KAAVA,EAAJ,CAEA,IACIG,EADa,IAAIC,IAAiBC,GACVC,OAAON,GAC/BO,EAAaJ,EAAW,GACvBI,IAEDP,IAAUO,EAAU,IAAgC,IAAtBJ,EAAWK,SAC3Cd,EAASa,GACTf,EAAgB,OAaOc,CAAOJ,EAAEO,OAAOT,kBCrB9BU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.59fa99e4.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { Emoji, NimbleEmojiIndex } from \"emoji-mart\";\nimport data from \"emoji-mart/data/google.json\";\nimport { FormControl, Input } from \"@material-ui/core\";\n\nfunction App() {\n  const [typingString, setTypingString] = useState(\"\");\n  const [emoji, setEmoji] = useState(\"\");\n  function search(value) {\n    setTypingString(value);\n    if (value === \"\") return;\n\n    let emojiIndex = new NimbleEmojiIndex(data);\n    let emojiArray = emojiIndex.search(value);\n    let firstEmoji = emojiArray[0];\n    if (!firstEmoji) return;\n\n    if (value === firstEmoji[\"id\"] || emojiArray.length === 1) {\n      setEmoji(firstEmoji);\n      setTypingString(\"\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Emoji emoji={emoji} size={32} />\n\n        <FormControl>\n          <Input\n            id=\"my-input\"\n            value={typingString}\n            onChange={(e) => search(e.target.value)}\n          />\n        </FormControl>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}